syntax = "proto3";

package pb;

import "pb/common.proto";

message CreateMachineReq {
    string image_id = 1;                // 用于构建镜像所使用的id
    string name = 2;                    // 容器名，为空时默认使用生成id作为名字
    repeated string env = 3;            // 环境变量
    bool tty = 4;                       // 是否启用tty
    repeated string cmd = 5;
    string working_dir = 6;
    map<string, PortBindings> exposed_ports = 7; // 端口映射
    Network network = 8;
    repeated MachineVolume volumes = 9;
}

message PortBinding {
    string host_ip = 1;                      // 要监听的ip
    string host_port = 2;                    // 要监听的主机端口
}

message PortBindings {
    repeated PortBinding port_bindings = 1;
}

message CreateMachineResp {
    string id = 1;
    Error err = 2;
}

message DeleteMachineReq {
    string id = 1;
}

message ListMachineResp {
    repeated MachineInfo machine_infos = 1;
    Error err = 2;
}

message MachineInfo {
    string id = 1;
	string name = 2;
	string image_name = 3;
	string image_type = 4;
	string create_time = 5;
    string status = 6;
    string image_id = 7;
}

message StartMachineReq {
    string id = 1;
}

message MachineIdReq {
    string id = 1;
}

message KillMachineReq {
    string id = 1;
    string signal = 2;
}

message StopMachineReq {
    string id = 1;
    int32 timeout = 2;
}

message RenameMachineReq {
    string id = 1;
    string name = 2; // 新名字
}

message RestartMachineReq {
    string id = 1;
    int32 timeout = 2; // 为 kill container 设置的超时时间
}

message AttachStreamIn {
    string id = 1;
    bytes content = 2;
}

message AttachStreamOut {
    bytes content = 1;
}

message ResizeTTYReq {
    string id = 1;
    uint32 height = 2;
    uint32 width = 3;
}

message CanAttachJudgeResp {
    bool tty = 1;
    string state = 2;
    string image_type = 3;
}

message InspectMachineResp {
    string name = 1;
    string id = 2;
    string type = 3;
    string spec = 4;
    string runtime_config = 5;
}

message Network {
    string hostname = 1;                        // 主机名
    repeated HostEntry extra_hosts = 2;         // 额外的hosts
    // 额外的网络接口，无接口时则只有本地环回设备
    // 存在多个接口时则默认使用第一个接口作为网络默认出口
    repeated NetworkInterface interfaces = 3;
}

message HostEntry {
    string ip = 1;
    string host = 2;
}

message NetworkInterface {
    string name = 1;                        // 容器内veth的名字
    string bridge = 2;                      // 该veth需要接入的网桥名
    string mac = 3;                         // mac地址，可以为空
    string gateway = 4;                     // 网关ip
    repeated NetworkAddress address = 5;    // ipv4地址，
}

message NetworkAddress {
    string ip = 1;
    int32 mask = 2;
}

message MachineVolume {
    string name = 1;                    // 使用的卷名称，为空时自动创建一个卷
    string source = 2;                  // host内的路径，当路径为空时则自动在volume目录下创建一个卷
    string destination = 3;             // machine内的挂载路径
    bool readonly = 4;                  // 是否使用只读模式
}
