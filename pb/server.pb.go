// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/server.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("pb/server.proto", fileDescriptor_98d161fbd54d4312)
}

var fileDescriptor_98d161fbd54d4312 = []byte{
	// 582 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcb, 0x6e, 0xda, 0x40,
	0x14, 0x86, 0x49, 0x17, 0x55, 0x39, 0x80, 0x4b, 0x4c, 0x92, 0x05, 0xdd, 0xb1, 0xea, 0xa6, 0x76,
	0x4a, 0xb3, 0x88, 0xda, 0x28, 0x12, 0xa2, 0x2c, 0xe8, 0x5d, 0x40, 0x2b, 0x65, 0x69, 0xc3, 0x94,
	0x58, 0x65, 0x2e, 0x19, 0x8f, 0xd3, 0xb4, 0xaf, 0xd6, 0x97, 0xab, 0xe6, 0x9a, 0x19, 0x0c, 0x91,
	0xb2, 0xf4, 0x37, 0xff, 0x3f, 0xe7, 0x32, 0xe7, 0x18, 0x9e, 0xb3, 0x3c, 0x2d, 0x11, 0xbf, 0x45,
	0x3c, 0x61, 0x9c, 0x0a, 0x1a, 0x3f, 0x61, 0x79, 0xbf, 0xcb, 0xf2, 0x94, 0x20, 0xf1, 0x9b, 0xf2,
	0x5f, 0x9a, 0xf6, 0x23, 0x96, 0xa7, 0x05, 0xce, 0xd6, 0xc8, 0x7c, 0x4b, 0x05, 0xce, 0x96, 0xd7,
	0x05, 0xb1, 0x44, 0x5e, 0xb4, 0xa4, 0x18, 0x53, 0xe2, 0x81, 0x5b, 0xba, 0xa9, 0xb0, 0x55, 0xbc,
	0x58, 0x53, 0xba, 0xde, 0xa0, 0x54, 0x7d, 0xe5, 0xd5, 0xcf, 0x14, 0x61, 0x26, 0xfe, 0xe8, 0xc3,
	0xe1, 0xbf, 0x36, 0x3c, 0x9b, 0xdc, 0xa1, 0x65, 0x25, 0x28, 0x8f, 0x2f, 0xa1, 0x33, 0xe6, 0x28,
	0x13, 0xe8, 0x8b, 0x4e, 0x22, 0x3e, 0x4a, 0x58, 0x9e, 0x98, 0x0f, 0x7d, 0x32, 0x43, 0x37, 0xfd,
	0xe3, 0x1d, 0xb4, 0x64, 0x83, 0x86, 0xf4, 0xbf, 0x47, 0x1b, 0xb4, 0xdb, 0xaf, 0x4f, 0xb6, 0xfd,
	0x96, 0x2a, 0xff, 0x08, 0xa2, 0x29, 0x29, 0x19, 0x5a, 0x0a, 0x7b, 0x81, 0x2f, 0x35, 0x47, 0xf2,
	0x86, 0x93, 0x5d, 0x58, 0x5d, 0x71, 0x01, 0xad, 0x4f, 0x45, 0xe9, 0xfc, 0x27, 0x89, 0x2e, 0x3e,
	0xb1, 0xc5, 0x27, 0x13, 0x59, 0x7c, 0xbf, 0xe7, 0x5d, 0x20, 0xf5, 0xc6, 0x7d, 0x06, 0xd1, 0x98,
	0x12, 0xb2, 0x27, 0x01, 0x73, 0x24, 0x13, 0x68, 0x4a, 0x3c, 0xe1, 0x9c, 0xf2, 0x41, 0x23, 0x3e,
	0x87, 0xd6, 0x14, 0x33, 0xca, 0xc5, 0x54, 0xbe, 0x54, 0x1c, 0xcb, 0x33, 0x0f, 0x48, 0x7d, 0xaf,
	0xc6, 0x54, 0xbc, 0x73, 0x68, 0xca, 0xe8, 0xda, 0xb7, 0x2f, 0xd7, 0x43, 0xe9, 0x75, 0x32, 0xe7,
	0x6c, 0xe9, 0xd6, 0x79, 0x31, 0x3d, 0xe0, 0x62, 0x06, 0x4c, 0x39, 0x13, 0x68, 0x4d, 0xee, 0xb6,
	0xb2, 0xf5, 0x40, 0xad, 0x3a, 0x37, 0x14, 0x9f, 0xf5, 0xdc, 0xe9, 0x47, 0x0d, 0x90, 0x7b, 0xd4,
	0x2d, 0xaa, 0xe2, 0x0d, 0xed, 0x50, 0x04, 0xfe, 0x00, 0xd5, 0x62, 0x9a, 0x57, 0xb4, 0x8e, 0x07,
	0x5f, 0xd1, 0x13, 0x9a, 0x88, 0xa7, 0xd0, 0x9e, 0x8b, 0x8c, 0x3b, 0xbb, 0x92, 0xf9, 0xa4, 0x16,
	0x2f, 0x81, 0xd6, 0xc7, 0x62, 0xb3, 0xb1, 0x06, 0xd5, 0x13, 0x0f, 0xec, 0xd2, 0xcf, 0x05, 0x65,
	0x81, 0xde, 0x03, 0x35, 0xfd, 0x10, 0x3a, 0x33, 0x44, 0x32, 0x1c, 0xf6, 0x20, 0x40, 0x35, 0xcf,
	0x19, 0x44, 0x33, 0x54, 0xfa, 0x75, 0x1c, 0x6b, 0x53, 0xf9, 0x50, 0x25, 0x97, 0xd0, 0x19, 0x09,
	0x91, 0x2d, 0xaf, 0x83, 0xdc, 0x34, 0x9a, 0x0b, 0x8e, 0x32, 0x3c, 0x25, 0xba, 0x6f, 0x3e, 0xfb,
	0x5a, 0x89, 0x41, 0xe3, 0xe5, 0xc1, 0xe9, 0x41, 0x7c, 0xe1, 0x56, 0xd0, 0x5e, 0xd0, 0x95, 0x62,
	0xf3, 0x31, 0x5d, 0xb9, 0xed, 0x0b, 0x55, 0xa6, 0xf3, 0xaf, 0xa0, 0xfd, 0x2d, 0xab, 0x4a, 0xb4,
	0xdf, 0x1b, 0x24, 0x9b, 0x42, 0xf4, 0x9d, 0xb0, 0x47, 0x18, 0xe4, 0x2c, 0x52, 0x8c, 0x0b, 0x11,
	0xce, 0xa2, 0x8f, 0xee, 0x67, 0x31, 0xa4, 0x2a, 0xbf, 0xd7, 0xd0, 0x9d, 0xa1, 0xb2, 0xf8, 0x6b,
	0xe3, 0x2d, 0x16, 0x57, 0x3a, 0xa4, 0xa6, 0x8b, 0xc5, 0xd5, 0x8e, 0x51, 0x8c, 0xc6, 0x19, 0xd1,
	0xcd, 0xfa, 0x50, 0xad, 0xd6, 0x7b, 0x1b, 0x12, 0xaa, 0x4c, 0xc0, 0xb7, 0x00, 0x72, 0x3e, 0x7f,
	0xa8, 0xff, 0xf1, 0xde, 0x39, 0x8e, 0xed, 0x1c, 0x6b, 0x9d, 0xf1, 0xbe, 0x83, 0xb6, 0xde, 0x27,
	0xe3, 0xee, 0xdd, 0x6f, 0x98, 0xd5, 0xdd, 0xf4, 0x8f, 0xea, 0xd0, 0x6c, 0x5d, 0x73, 0xb4, 0x5a,
	0x19, 0xa7, 0xca, 0xd8, 0x7d, 0x4a, 0xdb, 0xe1, 0x16, 0xb1, 0x7b, 0xa3, 0xd7, 0xd2, 0x0f, 0xe8,
	0x93, 0xed, 0xe6, 0xe4, 0x4f, 0x55, 0x21, 0x6f, 0xfe, 0x07, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x93,
	0x8c, 0x85, 0xce, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ExecutorClient is the client API for Executor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExecutorClient interface {
	// 创建network
	CreateNetwork(ctx context.Context, in *NetworkCreateReq, opts ...grpc.CallOption) (*NetworkCreateResp, error)
	// 删除network
	DeleteNetwork(ctx context.Context, in *NetworkDeleteReq, opts ...grpc.CallOption) (*NetworkDeleteResp, error)
	// inspect network
	InspectNetwork(ctx context.Context, in *NetworkInspectReq, opts ...grpc.CallOption) (*NetworkInspectResp, error)
	// 展示所有network
	ListNetwork(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NetworkListResp, error)
	// connect network
	ConnectNetwork(ctx context.Context, in *NetworkConnectReq, opts ...grpc.CallOption) (*Error, error)
	// 导入image
	ImportImage(ctx context.Context, in *ImportImageReq, opts ...grpc.CallOption) (*ImportImageResp, error)
	// 展示所有image
	ListImage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListImageResp, error)
	// 删除image
	DeleteImage(ctx context.Context, in *DeleteImageReq, opts ...grpc.CallOption) (*DeleteImageResp, error)
	// export image
	ExportImage(ctx context.Context, in *ExportImageReq, opts ...grpc.CallOption) (*Error, error)
	// 创建machine
	CreateMachine(ctx context.Context, in *CreateMachineReq, opts ...grpc.CallOption) (*CreateMachineResp, error)
	// 删除machine
	DeleteMachine(ctx context.Context, in *DeleteMachineReq, opts ...grpc.CallOption) (*Error, error)
	// 展示所有machine
	ListMachine(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListMachineResp, error)
	// 开启machine
	StartMachine(ctx context.Context, in *StartMachineReq, opts ...grpc.CallOption) (*Error, error)
	// 强制关闭machine
	KillMachine(ctx context.Context, in *KillMachineReq, opts ...grpc.CallOption) (*Error, error)
	// 关闭machine
	StopMachine(ctx context.Context, in *StopMachineReq, opts ...grpc.CallOption) (*Error, error)
	// 重命名machine
	RenameMachine(ctx context.Context, in *RenameMachineReq, opts ...grpc.CallOption) (*Error, error)
	// 重启machine
	RestartMachine(ctx context.Context, in *RestartMachineReq, opts ...grpc.CallOption) (*Error, error)
	// 连接进入machine
	AttachMachine(ctx context.Context, opts ...grpc.CallOption) (Executor_AttachMachineClient, error)
	// 查看machine
	InspectMachine(ctx context.Context, in *MachineIdReq, opts ...grpc.CallOption) (*InspectMachineResp, error)
	// 挂起machine
	PauseMachine(ctx context.Context, in *MachineIdReq, opts ...grpc.CallOption) (*Error, error)
	// 恢复machine
	UnpauseMachine(ctx context.Context, in *MachineIdReq, opts ...grpc.CallOption) (*Error, error)
	// commit machine
	CommitMachine(ctx context.Context, in *CommitMachineReq, opts ...grpc.CallOption) (*CommitMachineResp, error)
	// 重新定义machine伪终端长和宽
	ResizeMachineTTY(ctx context.Context, in *ResizeTTYReq, opts ...grpc.CallOption) (*Error, error)
	// 判断machine是否有伪终端
	CanAttachJudge(ctx context.Context, in *MachineIdReq, opts ...grpc.CallOption) (*CanAttachJudgeResp, error)
	// 展示所有volume
	ListVolume(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListVolumeResp, error)
	// 创建volume
	CreateVolume(ctx context.Context, in *CreateVolumeReq, opts ...grpc.CallOption) (*CreateVolumeResp, error)
	// 添加volume
	AddVolume(ctx context.Context, in *AddVolumeReq, opts ...grpc.CallOption) (*AddVolumeResp, error)
	// 删除volume
	DeleteVolume(ctx context.Context, in *DeleteVolumeReq, opts ...grpc.CallOption) (*Error, error)
}

type executorClient struct {
	cc grpc.ClientConnInterface
}

func NewExecutorClient(cc grpc.ClientConnInterface) ExecutorClient {
	return &executorClient{cc}
}

func (c *executorClient) CreateNetwork(ctx context.Context, in *NetworkCreateReq, opts ...grpc.CallOption) (*NetworkCreateResp, error) {
	out := new(NetworkCreateResp)
	err := c.cc.Invoke(ctx, "/pb.Executor/CreateNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) DeleteNetwork(ctx context.Context, in *NetworkDeleteReq, opts ...grpc.CallOption) (*NetworkDeleteResp, error) {
	out := new(NetworkDeleteResp)
	err := c.cc.Invoke(ctx, "/pb.Executor/DeleteNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) InspectNetwork(ctx context.Context, in *NetworkInspectReq, opts ...grpc.CallOption) (*NetworkInspectResp, error) {
	out := new(NetworkInspectResp)
	err := c.cc.Invoke(ctx, "/pb.Executor/InspectNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) ListNetwork(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NetworkListResp, error) {
	out := new(NetworkListResp)
	err := c.cc.Invoke(ctx, "/pb.Executor/ListNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) ConnectNetwork(ctx context.Context, in *NetworkConnectReq, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/pb.Executor/ConnectNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) ImportImage(ctx context.Context, in *ImportImageReq, opts ...grpc.CallOption) (*ImportImageResp, error) {
	out := new(ImportImageResp)
	err := c.cc.Invoke(ctx, "/pb.Executor/ImportImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) ListImage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListImageResp, error) {
	out := new(ListImageResp)
	err := c.cc.Invoke(ctx, "/pb.Executor/ListImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) DeleteImage(ctx context.Context, in *DeleteImageReq, opts ...grpc.CallOption) (*DeleteImageResp, error) {
	out := new(DeleteImageResp)
	err := c.cc.Invoke(ctx, "/pb.Executor/DeleteImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) ExportImage(ctx context.Context, in *ExportImageReq, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/pb.Executor/ExportImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) CreateMachine(ctx context.Context, in *CreateMachineReq, opts ...grpc.CallOption) (*CreateMachineResp, error) {
	out := new(CreateMachineResp)
	err := c.cc.Invoke(ctx, "/pb.Executor/CreateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) DeleteMachine(ctx context.Context, in *DeleteMachineReq, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/pb.Executor/DeleteMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) ListMachine(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListMachineResp, error) {
	out := new(ListMachineResp)
	err := c.cc.Invoke(ctx, "/pb.Executor/ListMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) StartMachine(ctx context.Context, in *StartMachineReq, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/pb.Executor/StartMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) KillMachine(ctx context.Context, in *KillMachineReq, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/pb.Executor/KillMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) StopMachine(ctx context.Context, in *StopMachineReq, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/pb.Executor/StopMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) RenameMachine(ctx context.Context, in *RenameMachineReq, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/pb.Executor/RenameMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) RestartMachine(ctx context.Context, in *RestartMachineReq, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/pb.Executor/RestartMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) AttachMachine(ctx context.Context, opts ...grpc.CallOption) (Executor_AttachMachineClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Executor_serviceDesc.Streams[0], "/pb.Executor/AttachMachine", opts...)
	if err != nil {
		return nil, err
	}
	x := &executorAttachMachineClient{stream}
	return x, nil
}

type Executor_AttachMachineClient interface {
	Send(*AttachStreamIn) error
	Recv() (*AttachStreamOut, error)
	grpc.ClientStream
}

type executorAttachMachineClient struct {
	grpc.ClientStream
}

func (x *executorAttachMachineClient) Send(m *AttachStreamIn) error {
	return x.ClientStream.SendMsg(m)
}

func (x *executorAttachMachineClient) Recv() (*AttachStreamOut, error) {
	m := new(AttachStreamOut)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *executorClient) InspectMachine(ctx context.Context, in *MachineIdReq, opts ...grpc.CallOption) (*InspectMachineResp, error) {
	out := new(InspectMachineResp)
	err := c.cc.Invoke(ctx, "/pb.Executor/InspectMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) PauseMachine(ctx context.Context, in *MachineIdReq, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/pb.Executor/PauseMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) UnpauseMachine(ctx context.Context, in *MachineIdReq, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/pb.Executor/UnpauseMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) CommitMachine(ctx context.Context, in *CommitMachineReq, opts ...grpc.CallOption) (*CommitMachineResp, error) {
	out := new(CommitMachineResp)
	err := c.cc.Invoke(ctx, "/pb.Executor/CommitMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) ResizeMachineTTY(ctx context.Context, in *ResizeTTYReq, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/pb.Executor/ResizeMachineTTY", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) CanAttachJudge(ctx context.Context, in *MachineIdReq, opts ...grpc.CallOption) (*CanAttachJudgeResp, error) {
	out := new(CanAttachJudgeResp)
	err := c.cc.Invoke(ctx, "/pb.Executor/CanAttachJudge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) ListVolume(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListVolumeResp, error) {
	out := new(ListVolumeResp)
	err := c.cc.Invoke(ctx, "/pb.Executor/ListVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) CreateVolume(ctx context.Context, in *CreateVolumeReq, opts ...grpc.CallOption) (*CreateVolumeResp, error) {
	out := new(CreateVolumeResp)
	err := c.cc.Invoke(ctx, "/pb.Executor/CreateVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) AddVolume(ctx context.Context, in *AddVolumeReq, opts ...grpc.CallOption) (*AddVolumeResp, error) {
	out := new(AddVolumeResp)
	err := c.cc.Invoke(ctx, "/pb.Executor/AddVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) DeleteVolume(ctx context.Context, in *DeleteVolumeReq, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/pb.Executor/DeleteVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecutorServer is the server API for Executor service.
type ExecutorServer interface {
	// 创建network
	CreateNetwork(context.Context, *NetworkCreateReq) (*NetworkCreateResp, error)
	// 删除network
	DeleteNetwork(context.Context, *NetworkDeleteReq) (*NetworkDeleteResp, error)
	// inspect network
	InspectNetwork(context.Context, *NetworkInspectReq) (*NetworkInspectResp, error)
	// 展示所有network
	ListNetwork(context.Context, *empty.Empty) (*NetworkListResp, error)
	// connect network
	ConnectNetwork(context.Context, *NetworkConnectReq) (*Error, error)
	// 导入image
	ImportImage(context.Context, *ImportImageReq) (*ImportImageResp, error)
	// 展示所有image
	ListImage(context.Context, *empty.Empty) (*ListImageResp, error)
	// 删除image
	DeleteImage(context.Context, *DeleteImageReq) (*DeleteImageResp, error)
	// export image
	ExportImage(context.Context, *ExportImageReq) (*Error, error)
	// 创建machine
	CreateMachine(context.Context, *CreateMachineReq) (*CreateMachineResp, error)
	// 删除machine
	DeleteMachine(context.Context, *DeleteMachineReq) (*Error, error)
	// 展示所有machine
	ListMachine(context.Context, *empty.Empty) (*ListMachineResp, error)
	// 开启machine
	StartMachine(context.Context, *StartMachineReq) (*Error, error)
	// 强制关闭machine
	KillMachine(context.Context, *KillMachineReq) (*Error, error)
	// 关闭machine
	StopMachine(context.Context, *StopMachineReq) (*Error, error)
	// 重命名machine
	RenameMachine(context.Context, *RenameMachineReq) (*Error, error)
	// 重启machine
	RestartMachine(context.Context, *RestartMachineReq) (*Error, error)
	// 连接进入machine
	AttachMachine(Executor_AttachMachineServer) error
	// 查看machine
	InspectMachine(context.Context, *MachineIdReq) (*InspectMachineResp, error)
	// 挂起machine
	PauseMachine(context.Context, *MachineIdReq) (*Error, error)
	// 恢复machine
	UnpauseMachine(context.Context, *MachineIdReq) (*Error, error)
	// commit machine
	CommitMachine(context.Context, *CommitMachineReq) (*CommitMachineResp, error)
	// 重新定义machine伪终端长和宽
	ResizeMachineTTY(context.Context, *ResizeTTYReq) (*Error, error)
	// 判断machine是否有伪终端
	CanAttachJudge(context.Context, *MachineIdReq) (*CanAttachJudgeResp, error)
	// 展示所有volume
	ListVolume(context.Context, *empty.Empty) (*ListVolumeResp, error)
	// 创建volume
	CreateVolume(context.Context, *CreateVolumeReq) (*CreateVolumeResp, error)
	// 添加volume
	AddVolume(context.Context, *AddVolumeReq) (*AddVolumeResp, error)
	// 删除volume
	DeleteVolume(context.Context, *DeleteVolumeReq) (*Error, error)
}

// UnimplementedExecutorServer can be embedded to have forward compatible implementations.
type UnimplementedExecutorServer struct {
}

func (*UnimplementedExecutorServer) CreateNetwork(ctx context.Context, req *NetworkCreateReq) (*NetworkCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetwork not implemented")
}
func (*UnimplementedExecutorServer) DeleteNetwork(ctx context.Context, req *NetworkDeleteReq) (*NetworkDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetwork not implemented")
}
func (*UnimplementedExecutorServer) InspectNetwork(ctx context.Context, req *NetworkInspectReq) (*NetworkInspectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InspectNetwork not implemented")
}
func (*UnimplementedExecutorServer) ListNetwork(ctx context.Context, req *empty.Empty) (*NetworkListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetwork not implemented")
}
func (*UnimplementedExecutorServer) ConnectNetwork(ctx context.Context, req *NetworkConnectReq) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectNetwork not implemented")
}
func (*UnimplementedExecutorServer) ImportImage(ctx context.Context, req *ImportImageReq) (*ImportImageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportImage not implemented")
}
func (*UnimplementedExecutorServer) ListImage(ctx context.Context, req *empty.Empty) (*ListImageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImage not implemented")
}
func (*UnimplementedExecutorServer) DeleteImage(ctx context.Context, req *DeleteImageReq) (*DeleteImageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImage not implemented")
}
func (*UnimplementedExecutorServer) ExportImage(ctx context.Context, req *ExportImageReq) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportImage not implemented")
}
func (*UnimplementedExecutorServer) CreateMachine(ctx context.Context, req *CreateMachineReq) (*CreateMachineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMachine not implemented")
}
func (*UnimplementedExecutorServer) DeleteMachine(ctx context.Context, req *DeleteMachineReq) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMachine not implemented")
}
func (*UnimplementedExecutorServer) ListMachine(ctx context.Context, req *empty.Empty) (*ListMachineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachine not implemented")
}
func (*UnimplementedExecutorServer) StartMachine(ctx context.Context, req *StartMachineReq) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMachine not implemented")
}
func (*UnimplementedExecutorServer) KillMachine(ctx context.Context, req *KillMachineReq) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillMachine not implemented")
}
func (*UnimplementedExecutorServer) StopMachine(ctx context.Context, req *StopMachineReq) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopMachine not implemented")
}
func (*UnimplementedExecutorServer) RenameMachine(ctx context.Context, req *RenameMachineReq) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameMachine not implemented")
}
func (*UnimplementedExecutorServer) RestartMachine(ctx context.Context, req *RestartMachineReq) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartMachine not implemented")
}
func (*UnimplementedExecutorServer) AttachMachine(srv Executor_AttachMachineServer) error {
	return status.Errorf(codes.Unimplemented, "method AttachMachine not implemented")
}
func (*UnimplementedExecutorServer) InspectMachine(ctx context.Context, req *MachineIdReq) (*InspectMachineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InspectMachine not implemented")
}
func (*UnimplementedExecutorServer) PauseMachine(ctx context.Context, req *MachineIdReq) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseMachine not implemented")
}
func (*UnimplementedExecutorServer) UnpauseMachine(ctx context.Context, req *MachineIdReq) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpauseMachine not implemented")
}
func (*UnimplementedExecutorServer) CommitMachine(ctx context.Context, req *CommitMachineReq) (*CommitMachineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitMachine not implemented")
}
func (*UnimplementedExecutorServer) ResizeMachineTTY(ctx context.Context, req *ResizeTTYReq) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResizeMachineTTY not implemented")
}
func (*UnimplementedExecutorServer) CanAttachJudge(ctx context.Context, req *MachineIdReq) (*CanAttachJudgeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanAttachJudge not implemented")
}
func (*UnimplementedExecutorServer) ListVolume(ctx context.Context, req *empty.Empty) (*ListVolumeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVolume not implemented")
}
func (*UnimplementedExecutorServer) CreateVolume(ctx context.Context, req *CreateVolumeReq) (*CreateVolumeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolume not implemented")
}
func (*UnimplementedExecutorServer) AddVolume(ctx context.Context, req *AddVolumeReq) (*AddVolumeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVolume not implemented")
}
func (*UnimplementedExecutorServer) DeleteVolume(ctx context.Context, req *DeleteVolumeReq) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVolume not implemented")
}

func RegisterExecutorServer(s *grpc.Server, srv ExecutorServer) {
	s.RegisterService(&_Executor_serviceDesc, srv)
}

func _Executor_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/CreateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).CreateNetwork(ctx, req.(*NetworkCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_DeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).DeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/DeleteNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).DeleteNetwork(ctx, req.(*NetworkDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_InspectNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkInspectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).InspectNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/InspectNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).InspectNetwork(ctx, req.(*NetworkInspectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_ListNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).ListNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/ListNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).ListNetwork(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_ConnectNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkConnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).ConnectNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/ConnectNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).ConnectNetwork(ctx, req.(*NetworkConnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_ImportImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).ImportImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/ImportImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).ImportImage(ctx, req.(*ImportImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_ListImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).ListImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/ListImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).ListImage(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_DeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).DeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/DeleteImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).DeleteImage(ctx, req.(*DeleteImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_ExportImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).ExportImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/ExportImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).ExportImage(ctx, req.(*ExportImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_CreateMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMachineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).CreateMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/CreateMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).CreateMachine(ctx, req.(*CreateMachineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_DeleteMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMachineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).DeleteMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/DeleteMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).DeleteMachine(ctx, req.(*DeleteMachineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_ListMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).ListMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/ListMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).ListMachine(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_StartMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMachineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).StartMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/StartMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).StartMachine(ctx, req.(*StartMachineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_KillMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillMachineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).KillMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/KillMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).KillMachine(ctx, req.(*KillMachineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_StopMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopMachineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).StopMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/StopMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).StopMachine(ctx, req.(*StopMachineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_RenameMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameMachineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).RenameMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/RenameMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).RenameMachine(ctx, req.(*RenameMachineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_RestartMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartMachineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).RestartMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/RestartMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).RestartMachine(ctx, req.(*RestartMachineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_AttachMachine_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExecutorServer).AttachMachine(&executorAttachMachineServer{stream})
}

type Executor_AttachMachineServer interface {
	Send(*AttachStreamOut) error
	Recv() (*AttachStreamIn, error)
	grpc.ServerStream
}

type executorAttachMachineServer struct {
	grpc.ServerStream
}

func (x *executorAttachMachineServer) Send(m *AttachStreamOut) error {
	return x.ServerStream.SendMsg(m)
}

func (x *executorAttachMachineServer) Recv() (*AttachStreamIn, error) {
	m := new(AttachStreamIn)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Executor_InspectMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachineIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).InspectMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/InspectMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).InspectMachine(ctx, req.(*MachineIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_PauseMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachineIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).PauseMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/PauseMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).PauseMachine(ctx, req.(*MachineIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_UnpauseMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachineIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).UnpauseMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/UnpauseMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).UnpauseMachine(ctx, req.(*MachineIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_CommitMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitMachineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).CommitMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/CommitMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).CommitMachine(ctx, req.(*CommitMachineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_ResizeMachineTTY_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResizeTTYReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).ResizeMachineTTY(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/ResizeMachineTTY",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).ResizeMachineTTY(ctx, req.(*ResizeTTYReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_CanAttachJudge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachineIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).CanAttachJudge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/CanAttachJudge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).CanAttachJudge(ctx, req.(*MachineIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_ListVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).ListVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/ListVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).ListVolume(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolumeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/CreateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).CreateVolume(ctx, req.(*CreateVolumeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_AddVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVolumeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).AddVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/AddVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).AddVolume(ctx, req.(*AddVolumeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_DeleteVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVolumeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).DeleteVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/DeleteVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).DeleteVolume(ctx, req.(*DeleteVolumeReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Executor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Executor",
	HandlerType: (*ExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNetwork",
			Handler:    _Executor_CreateNetwork_Handler,
		},
		{
			MethodName: "DeleteNetwork",
			Handler:    _Executor_DeleteNetwork_Handler,
		},
		{
			MethodName: "InspectNetwork",
			Handler:    _Executor_InspectNetwork_Handler,
		},
		{
			MethodName: "ListNetwork",
			Handler:    _Executor_ListNetwork_Handler,
		},
		{
			MethodName: "ConnectNetwork",
			Handler:    _Executor_ConnectNetwork_Handler,
		},
		{
			MethodName: "ImportImage",
			Handler:    _Executor_ImportImage_Handler,
		},
		{
			MethodName: "ListImage",
			Handler:    _Executor_ListImage_Handler,
		},
		{
			MethodName: "DeleteImage",
			Handler:    _Executor_DeleteImage_Handler,
		},
		{
			MethodName: "ExportImage",
			Handler:    _Executor_ExportImage_Handler,
		},
		{
			MethodName: "CreateMachine",
			Handler:    _Executor_CreateMachine_Handler,
		},
		{
			MethodName: "DeleteMachine",
			Handler:    _Executor_DeleteMachine_Handler,
		},
		{
			MethodName: "ListMachine",
			Handler:    _Executor_ListMachine_Handler,
		},
		{
			MethodName: "StartMachine",
			Handler:    _Executor_StartMachine_Handler,
		},
		{
			MethodName: "KillMachine",
			Handler:    _Executor_KillMachine_Handler,
		},
		{
			MethodName: "StopMachine",
			Handler:    _Executor_StopMachine_Handler,
		},
		{
			MethodName: "RenameMachine",
			Handler:    _Executor_RenameMachine_Handler,
		},
		{
			MethodName: "RestartMachine",
			Handler:    _Executor_RestartMachine_Handler,
		},
		{
			MethodName: "InspectMachine",
			Handler:    _Executor_InspectMachine_Handler,
		},
		{
			MethodName: "PauseMachine",
			Handler:    _Executor_PauseMachine_Handler,
		},
		{
			MethodName: "UnpauseMachine",
			Handler:    _Executor_UnpauseMachine_Handler,
		},
		{
			MethodName: "CommitMachine",
			Handler:    _Executor_CommitMachine_Handler,
		},
		{
			MethodName: "ResizeMachineTTY",
			Handler:    _Executor_ResizeMachineTTY_Handler,
		},
		{
			MethodName: "CanAttachJudge",
			Handler:    _Executor_CanAttachJudge_Handler,
		},
		{
			MethodName: "ListVolume",
			Handler:    _Executor_ListVolume_Handler,
		},
		{
			MethodName: "CreateVolume",
			Handler:    _Executor_CreateVolume_Handler,
		},
		{
			MethodName: "AddVolume",
			Handler:    _Executor_AddVolume_Handler,
		},
		{
			MethodName: "DeleteVolume",
			Handler:    _Executor_DeleteVolume_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AttachMachine",
			Handler:       _Executor_AttachMachine_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/server.proto",
}
