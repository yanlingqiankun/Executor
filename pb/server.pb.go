// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/server.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("pb/server.proto", fileDescriptor_98d161fbd54d4312)
}

var fileDescriptor_98d161fbd54d4312 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4b, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x11, 0x12, 0x88, 0xba, 0x50, 0x20, 0x85, 0x2e, 0xc2, 0x8e, 0x03, 0x38, 0xa8, 0x6c,
	0x58, 0x20, 0x24, 0x04, 0x5d, 0x44, 0x3c, 0x16, 0x70, 0x82, 0x38, 0x1a, 0x42, 0x44, 0x1c, 0x1b,
	0xc7, 0xe5, 0x71, 0x48, 0xee, 0x84, 0xc6, 0x8f, 0xd4, 0x49, 0x03, 0x4b, 0x7f, 0x9e, 0x6f, 0xfe,
	0xfa, 0x6f, 0xc8, 0xbe, 0x64, 0x49, 0x03, 0xea, 0x03, 0x14, 0x95, 0x4a, 0x68, 0x11, 0x6d, 0x4a,
	0x16, 0x1f, 0x48, 0x96, 0xd4, 0xa0, 0x3f, 0x85, 0x7a, 0xb3, 0x34, 0x9e, 0x48, 0x96, 0x94, 0x3c,
	0x2b, 0xc0, 0x9d, 0x71, 0x82, 0x67, 0xf9, 0x6b, 0x59, 0x7b, 0x82, 0x8b, 0x72, 0xc1, 0xb9, 0xa8,
	0x1d, 0x38, 0x29, 0x84, 0x28, 0x2a, 0x48, 0xcc, 0x89, 0x2d, 0x5f, 0x12, 0xe0, 0x52, 0x7f, 0xdb,
	0xcb, 0xf9, 0xcf, 0x16, 0xd9, 0x59, 0x7c, 0x41, 0xbe, 0xd4, 0x42, 0x45, 0x57, 0x64, 0xef, 0x46,
	0x41, 0xa6, 0xe1, 0xd1, 0x66, 0x46, 0x47, 0x54, 0x32, 0xea, 0x0e, 0xf6, 0xe6, 0x09, 0xde, 0xe3,
	0xe3, 0x01, 0xda, 0xc8, 0xd3, 0x0d, 0xf4, 0x6f, 0xa1, 0x82, 0x61, 0xdf, 0xde, 0xf4, 0x7d, 0x4f,
	0x8d, 0x7f, 0x4d, 0x26, 0x69, 0xdd, 0x48, 0xc8, 0xb5, 0x5f, 0x10, 0x8e, 0xba, 0x2b, 0xdc, 0x30,
	0x1b, 0xc2, 0x66, 0xc5, 0x25, 0x19, 0xdf, 0x97, 0x4d, 0xeb, 0xcf, 0xa8, 0x7d, 0x3c, 0xf5, 0x8f,
	0xa7, 0x0b, 0x7c, 0x7c, 0x3c, 0x0d, 0x16, 0xe0, 0xbc, 0xb3, 0x2f, 0xc8, 0x38, 0xe5, 0x52, 0x28,
	0x9d, 0x62, 0xc5, 0x51, 0x84, 0x53, 0x01, 0xc0, 0xe8, 0xe9, 0x1a, 0x73, 0xe6, 0x08, 0xf7, 0x58,
	0xef, 0xaf, 0xd4, 0x43, 0x74, 0xdb, 0xb1, 0x55, 0xa6, 0x2d, 0x21, 0xc8, 0x0c, 0x40, 0x9b, 0xd9,
	0x61, 0xbe, 0x6e, 0x5b, 0xff, 0x83, 0xfd, 0x00, 0x6c, 0xdd, 0x1d, 0xd4, 0xd6, 0xdd, 0xa3, 0xc6,
	0x9f, 0xfb, 0xbf, 0xab, 0xe3, 0x77, 0x10, 0xfa, 0x23, 0xa4, 0x0b, 0xa5, 0x84, 0x5a, 0xf5, 0xeb,
	0x8d, 0x7f, 0xfb, 0x0d, 0x06, 0x5d, 0xe2, 0x19, 0xd9, 0x7d, 0xd6, 0x99, 0x6a, 0x75, 0x33, 0x16,
	0x92, 0xb5, 0x3c, 0x4a, 0xc6, 0x77, 0x65, 0x55, 0x79, 0xc1, 0xb4, 0x13, 0x80, 0xfe, 0x3c, 0xdb,
	0x36, 0x3f, 0xe4, 0xfc, 0x37, 0x00, 0x00, 0xff, 0xff, 0x62, 0x49, 0xf0, 0xbd, 0x4f, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ExecutorClient is the client API for Executor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExecutorClient interface {
	// notwork
	CreateNetwork(ctx context.Context, in *NetworkCreateReq, opts ...grpc.CallOption) (*NetworkCreateResp, error)
	DeleteNetwork(ctx context.Context, in *NetworkDeleteReq, opts ...grpc.CallOption) (*NetworkDeleteResp, error)
	InspectNetwork(ctx context.Context, in *NetworkInspectReq, opts ...grpc.CallOption) (*NetworkInspectResp, error)
	ListNetwork(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NetworkListResp, error)
	// image
	ImportImage(ctx context.Context, in *ImportImageReq, opts ...grpc.CallOption) (*ImportImageResp, error)
	ListImage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListImageResp, error)
	DeleteImage(ctx context.Context, in *DeleteImageReq, opts ...grpc.CallOption) (*DeleteImageResp, error)
	// machine
	CreateMachine(ctx context.Context, in *CreateMachineReq, opts ...grpc.CallOption) (*CreateMachineResp, error)
	DeleteMachine(ctx context.Context, in *DeleteMachineReq, opts ...grpc.CallOption) (*Error, error)
	ListMachine(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListMachineResp, error)
	StartMachine(ctx context.Context, in *StartMachineReq, opts ...grpc.CallOption) (*Error, error)
	KillMachine(ctx context.Context, in *KillMachineReq, opts ...grpc.CallOption) (*Error, error)
}

type executorClient struct {
	cc grpc.ClientConnInterface
}

func NewExecutorClient(cc grpc.ClientConnInterface) ExecutorClient {
	return &executorClient{cc}
}

func (c *executorClient) CreateNetwork(ctx context.Context, in *NetworkCreateReq, opts ...grpc.CallOption) (*NetworkCreateResp, error) {
	out := new(NetworkCreateResp)
	err := c.cc.Invoke(ctx, "/pb.Executor/CreateNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) DeleteNetwork(ctx context.Context, in *NetworkDeleteReq, opts ...grpc.CallOption) (*NetworkDeleteResp, error) {
	out := new(NetworkDeleteResp)
	err := c.cc.Invoke(ctx, "/pb.Executor/DeleteNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) InspectNetwork(ctx context.Context, in *NetworkInspectReq, opts ...grpc.CallOption) (*NetworkInspectResp, error) {
	out := new(NetworkInspectResp)
	err := c.cc.Invoke(ctx, "/pb.Executor/InspectNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) ListNetwork(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NetworkListResp, error) {
	out := new(NetworkListResp)
	err := c.cc.Invoke(ctx, "/pb.Executor/ListNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) ImportImage(ctx context.Context, in *ImportImageReq, opts ...grpc.CallOption) (*ImportImageResp, error) {
	out := new(ImportImageResp)
	err := c.cc.Invoke(ctx, "/pb.Executor/ImportImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) ListImage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListImageResp, error) {
	out := new(ListImageResp)
	err := c.cc.Invoke(ctx, "/pb.Executor/ListImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) DeleteImage(ctx context.Context, in *DeleteImageReq, opts ...grpc.CallOption) (*DeleteImageResp, error) {
	out := new(DeleteImageResp)
	err := c.cc.Invoke(ctx, "/pb.Executor/DeleteImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) CreateMachine(ctx context.Context, in *CreateMachineReq, opts ...grpc.CallOption) (*CreateMachineResp, error) {
	out := new(CreateMachineResp)
	err := c.cc.Invoke(ctx, "/pb.Executor/CreateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) DeleteMachine(ctx context.Context, in *DeleteMachineReq, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/pb.Executor/DeleteMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) ListMachine(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListMachineResp, error) {
	out := new(ListMachineResp)
	err := c.cc.Invoke(ctx, "/pb.Executor/ListMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) StartMachine(ctx context.Context, in *StartMachineReq, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/pb.Executor/StartMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) KillMachine(ctx context.Context, in *KillMachineReq, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/pb.Executor/KillMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecutorServer is the server API for Executor service.
type ExecutorServer interface {
	// notwork
	CreateNetwork(context.Context, *NetworkCreateReq) (*NetworkCreateResp, error)
	DeleteNetwork(context.Context, *NetworkDeleteReq) (*NetworkDeleteResp, error)
	InspectNetwork(context.Context, *NetworkInspectReq) (*NetworkInspectResp, error)
	ListNetwork(context.Context, *empty.Empty) (*NetworkListResp, error)
	// image
	ImportImage(context.Context, *ImportImageReq) (*ImportImageResp, error)
	ListImage(context.Context, *empty.Empty) (*ListImageResp, error)
	DeleteImage(context.Context, *DeleteImageReq) (*DeleteImageResp, error)
	// machine
	CreateMachine(context.Context, *CreateMachineReq) (*CreateMachineResp, error)
	DeleteMachine(context.Context, *DeleteMachineReq) (*Error, error)
	ListMachine(context.Context, *empty.Empty) (*ListMachineResp, error)
	StartMachine(context.Context, *StartMachineReq) (*Error, error)
	KillMachine(context.Context, *KillMachineReq) (*Error, error)
}

// UnimplementedExecutorServer can be embedded to have forward compatible implementations.
type UnimplementedExecutorServer struct {
}

func (*UnimplementedExecutorServer) CreateNetwork(ctx context.Context, req *NetworkCreateReq) (*NetworkCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetwork not implemented")
}
func (*UnimplementedExecutorServer) DeleteNetwork(ctx context.Context, req *NetworkDeleteReq) (*NetworkDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetwork not implemented")
}
func (*UnimplementedExecutorServer) InspectNetwork(ctx context.Context, req *NetworkInspectReq) (*NetworkInspectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InspectNetwork not implemented")
}
func (*UnimplementedExecutorServer) ListNetwork(ctx context.Context, req *empty.Empty) (*NetworkListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetwork not implemented")
}
func (*UnimplementedExecutorServer) ImportImage(ctx context.Context, req *ImportImageReq) (*ImportImageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportImage not implemented")
}
func (*UnimplementedExecutorServer) ListImage(ctx context.Context, req *empty.Empty) (*ListImageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImage not implemented")
}
func (*UnimplementedExecutorServer) DeleteImage(ctx context.Context, req *DeleteImageReq) (*DeleteImageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImage not implemented")
}
func (*UnimplementedExecutorServer) CreateMachine(ctx context.Context, req *CreateMachineReq) (*CreateMachineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMachine not implemented")
}
func (*UnimplementedExecutorServer) DeleteMachine(ctx context.Context, req *DeleteMachineReq) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMachine not implemented")
}
func (*UnimplementedExecutorServer) ListMachine(ctx context.Context, req *empty.Empty) (*ListMachineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachine not implemented")
}
func (*UnimplementedExecutorServer) StartMachine(ctx context.Context, req *StartMachineReq) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMachine not implemented")
}
func (*UnimplementedExecutorServer) KillMachine(ctx context.Context, req *KillMachineReq) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillMachine not implemented")
}

func RegisterExecutorServer(s *grpc.Server, srv ExecutorServer) {
	s.RegisterService(&_Executor_serviceDesc, srv)
}

func _Executor_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/CreateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).CreateNetwork(ctx, req.(*NetworkCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_DeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).DeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/DeleteNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).DeleteNetwork(ctx, req.(*NetworkDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_InspectNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkInspectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).InspectNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/InspectNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).InspectNetwork(ctx, req.(*NetworkInspectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_ListNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).ListNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/ListNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).ListNetwork(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_ImportImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).ImportImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/ImportImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).ImportImage(ctx, req.(*ImportImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_ListImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).ListImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/ListImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).ListImage(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_DeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).DeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/DeleteImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).DeleteImage(ctx, req.(*DeleteImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_CreateMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMachineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).CreateMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/CreateMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).CreateMachine(ctx, req.(*CreateMachineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_DeleteMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMachineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).DeleteMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/DeleteMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).DeleteMachine(ctx, req.(*DeleteMachineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_ListMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).ListMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/ListMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).ListMachine(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_StartMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMachineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).StartMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/StartMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).StartMachine(ctx, req.(*StartMachineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_KillMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillMachineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).KillMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Executor/KillMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).KillMachine(ctx, req.(*KillMachineReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Executor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Executor",
	HandlerType: (*ExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNetwork",
			Handler:    _Executor_CreateNetwork_Handler,
		},
		{
			MethodName: "DeleteNetwork",
			Handler:    _Executor_DeleteNetwork_Handler,
		},
		{
			MethodName: "InspectNetwork",
			Handler:    _Executor_InspectNetwork_Handler,
		},
		{
			MethodName: "ListNetwork",
			Handler:    _Executor_ListNetwork_Handler,
		},
		{
			MethodName: "ImportImage",
			Handler:    _Executor_ImportImage_Handler,
		},
		{
			MethodName: "ListImage",
			Handler:    _Executor_ListImage_Handler,
		},
		{
			MethodName: "DeleteImage",
			Handler:    _Executor_DeleteImage_Handler,
		},
		{
			MethodName: "CreateMachine",
			Handler:    _Executor_CreateMachine_Handler,
		},
		{
			MethodName: "DeleteMachine",
			Handler:    _Executor_DeleteMachine_Handler,
		},
		{
			MethodName: "ListMachine",
			Handler:    _Executor_ListMachine_Handler,
		},
		{
			MethodName: "StartMachine",
			Handler:    _Executor_StartMachine_Handler,
		},
		{
			MethodName: "KillMachine",
			Handler:    _Executor_KillMachine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/server.proto",
}
